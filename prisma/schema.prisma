// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelos para NextAuth.js
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Modelos principais do ReUse
model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relacionamentos NextAuth
  accounts      Account[]
  sessions      Session[]
  
  // Relacionamentos do ReUse
  products      Product[] @relation("ProductOwner")
  sentMessages  Message[] @relation("MessageSender")
  receivedMessages Message[] @relation("MessageReceiver")
}

model Product {
  id          String    @id @default(cuid())
  title       String
  description String?   @db.Text
  image       String?
  category    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Chave estrangeira para o dono do produto
  ownerId     String
  owner       User      @relation("ProductOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  
  // Relacionamento com mensagens
  messages    Message[]
}

model Message {
  id          String    @id @default(cuid())
  content     String    @db.Text
  timestamp   DateTime  @default(now())
  
  // Chaves estrangeiras
  senderId    String
  receiverId  String
  productId   String
  
  // Relacionamentos
  sender      User      @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver    User      @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
}
