generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id               String    @id @default(cuid())
  name             String
  email            String    @unique
  password         String
  role             String    @default("USER")
  ativo            Boolean   @default(true)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  accounts         Account[]
  receivedMessages Message[] @relation("MessageReceiver")
  sentMessages     Message[] @relation("MessageSender")
  products         Product[] @relation("ProductOwner")
  sessions         Session[]
}

model Product {
  id          String    @id @default(cuid())
  title       String
  description String?
  image       String?
  category    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  ownerId     String
  messages    Message[]
  owner       User      @relation("ProductOwner", fields: [ownerId], references: [id], onDelete: Cascade)
}

model Message {
  id         String   @id @default(cuid())
  content    String
  timestamp  DateTime @default(now())
  senderId   String
  receiverId String
  productId  String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  receiver   User     @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  sender     User     @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
}

model Config {
  id              Int      @id @default(autoincrement())
  maintenanceMode Boolean  @default(false)
  maintenanceMessage String? @default("Sistema em manutenção. Voltaremos em breve!")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}
