'use client'

import { useEffect, useState } from 'react'
import { useRouter, usePathname } from 'next/navigation'

interface MaintenanceConfig {
  maintenanceMode: boolean
  maintenanceMessage: string
}

export default function GlobalMaintenanceCheck() {
  const [isLoading, setIsLoading] = useState(true)
  const [maintenanceActive, setMaintenanceActive] = useState(false)
  const router = useRouter()
  const pathname = usePathname()

  useEffect(() => {
    checkMaintenanceStatus()
    
    // Verificar a cada 30 segundos
    const interval = setInterval(checkMaintenanceStatus, 30000)
    return () => clearInterval(interval)
  }, [])

  const checkMaintenanceStatus = async () => {
    try {
      const response = await fetch('/api/maintenance')
      const config: MaintenanceConfig = await response.json()
      
      setMaintenanceActive(config.maintenanceMode)
      
      if (config.maintenanceMode) {
        // Se modo de manuten칞칚o est치 ativo e n칚o est치 na p치gina de manuten칞칚o
        if (pathname !== '/maintenance') {
          console.log('游댢 Modo de manuten칞칚o ativo - redirecionando para manuten칞칚o...')
          router.push('/maintenance')
        }
      } else {
        // Se n칚o est치 em manuten칞칚o e est치 na p치gina de manuten칞칚o, redirecionar para home
        if (pathname === '/maintenance') {
          console.log('游릭 Sistema normal - redirecionando para home...')
          router.push('/')
        }
      }
    } catch (error) {
      console.error('Erro ao verificar status de manuten칞칚o:', error)
      // Em caso de erro, assumir que est치 em manuten칞칚o por seguran칞a
      setMaintenanceActive(true)
      if (pathname !== '/maintenance') {
        router.push('/maintenance')
      }
    } finally {
      setIsLoading(false)
    }
  }

  // Se est치 carregando, n칚o mostrar nada (deixar o site carregar normalmente)
  if (isLoading) {
    return null
  }

  // Se est치 em manuten칞칚o e n칚o 칠 a p치gina de manuten칞칚o, redirecionar silenciosamente
  if (maintenanceActive && pathname !== '/maintenance') {
    return null // O redirecionamento j치 foi feito no useEffect
  }

  return null // Componente invis칤vel
}
